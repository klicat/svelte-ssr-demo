
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.app = factory());
}(this, (function () { 'use strict';

    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    const escaped = {
        '"': '&quot;',
        "'": '&#39;',
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;'
    };
    function escape(html) {
        return String(html).replace(/["'&<>]/g, match => escaped[match]);
    }
    function each(items, fn) {
        let str = '';
        for (let i = 0; i < items.length; i += 1) {
            str += fn(items[i], i);
        }
        return str;
    }
    let on_destroy;
    function create_ssr_component(fn) {
        function $$render(result, props, bindings, slots) {
            const parent_component = current_component;
            const $$ = {
                on_destroy,
                context: new Map(parent_component ? parent_component.$$.context : []),
                // these will be immediately discarded
                on_mount: [],
                before_update: [],
                after_update: [],
                callbacks: blank_object()
            };
            set_current_component({ $$ });
            const html = fn(result, props, bindings, slots);
            set_current_component(parent_component);
            return html;
        }
        return {
            render: (props = {}, options = {}) => {
                on_destroy = [];
                const result = { title: '', head: '', css: new Set() };
                const html = $$render(result, props, {}, options);
                run_all(on_destroy);
                return {
                    html,
                    css: {
                        code: Array.from(result.css).map(css => css.code).join('\n'),
                        map: null // TODO
                    },
                    head: result.title + result.head
                };
            },
            $$render
        };
    }
    function add_attribute(name, value, boolean) {
        if (value == null || (boolean && !value))
            return '';
        return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
    }

    /* src/App.svelte generated by Svelte v3.31.0 */

    const css = {
    	code: "main.svelte-swpt9d{text-align:center;padding:1em;margin:0 auto}a.svelte-swpt9d{height:96px;max-width:500px;border-radius:5px;margin:8px auto;display:flex;align-items:center}img.svelte-swpt9d{height:80px;width:80px;border-radius:5px}a.svelte-swpt9d:hover{background:lightblue}.wrapper.svelte-swpt9d{padding-left:8px;text-align:start}.ingredients.svelte-swpt9d{font-size:.7rem}",
    	map: "{\"version\":3,\"file\":\"App.svelte\",\"sources\":[\"App.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let recipes = null;\\n\\n\\tlet showIngredients = false\\n\\n\\t$: {\\n\\t\\t!recipes && fetch(\\\"http://localhost:8080/api/\\\")\\n\\t\\t\\t.then((response) => response.json())\\n\\t\\t\\t.then((json) => (recipes = json.results));\\n\\t}\\n</script>\\n\\n<main>\\n\\t{#if recipes == null}\\n\\t\\t<div>Loading...</div>\\n\\t{:else}\\n\\t\\t<label>\\n\\t\\t\\t<input type=checkbox bind:checked={showIngredients}/>\\n\\t\\t\\tShow Ingredients\\n\\t\\t</label>\\n\\t\\t<ul>\\n\\t\\t\\t{#each recipes as recipe} \\n\\t\\t\\t\\t<a href={recipe.href}>\\n\\t\\t\\t\\t\\t<img src='{recipe.thumbnail}' alt='Thumbnail for {recipe.title}' />\\n\\t\\t\\t\\t\\t<div class='wrapper'>\\n\\t\\t\\t\\t\\t\\t<div>{recipe.title}</div>\\n\\t\\t\\t\\t\\t\\t{#if showIngredients}<div class='ingredients'>{recipe.ingredients}</div>{/if}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</a>\\n\\t\\t\\t{/each}\\n\\t\\t</ul>\\n\\t{/if}\\n</main>\\n\\n<style>\\n\\tmain {\\n\\t\\ttext-align: center;\\n\\t\\tpadding: 1em;\\n\\t\\tmargin: 0 auto;\\n\\t}\\n\\n\\ta {\\n\\t\\theight: 96px;\\n\\t\\tmax-width: 500px;\\n\\t\\tborder-radius: 5px;\\n\\t\\tmargin: 8px auto;\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t}\\n\\n\\timg {\\n\\t\\theight: 80px;\\n\\t\\twidth: 80px;\\n\\t\\tborder-radius: 5px;\\n\\t}\\n\\n\\ta:hover {\\n\\t\\tbackground: lightblue;\\n\\t}\\n\\n\\t.wrapper {\\n\\t\\tpadding-left: 8px;\\n\\t\\ttext-align: start;\\n\\t}\\n\\n\\t.ingredients {\\n\\t\\tfont-size: .7rem;\\n\\t}\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAmCC,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,CAAC,cAAC,CAAC,AACF,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACpB,CAAC,AAED,GAAG,cAAC,CAAC,AACJ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,AACnB,CAAC,AAED,eAAC,MAAM,AAAC,CAAC,AACR,UAAU,CAAE,SAAS,AACtB,CAAC,AAED,QAAQ,cAAC,CAAC,AACT,YAAY,CAAE,GAAG,CACjB,UAAU,CAAE,KAAK,AAClB,CAAC,AAED,YAAY,cAAC,CAAC,AACb,SAAS,CAAE,KAAK,AACjB,CAAC\"}"
    };

    const App = create_ssr_component(($$result, $$props, $$bindings, slots) => {
    	let { recipes = null } = $$props;
    	let showIngredients = false;
    	if ($$props.recipes === void 0 && $$bindings.recipes && recipes !== void 0) $$bindings.recipes(recipes);
    	$$result.css.add(css);

    	 {
    		{
    			!recipes && fetch("http://localhost:8080/api/").then(response => response.json()).then(json => recipes = json.results);
    		}
    	}

    	return `<main class="${"svelte-swpt9d"}">${recipes == null
	? `<div>Loading...</div>`
	: `<label><input type="${"checkbox"}"${add_attribute("checked", showIngredients, 1)}>
			Show Ingredients
		</label>
		<ul>${each(recipes, recipe => `<a${add_attribute("href", recipe.href, 0)} class="${"svelte-swpt9d"}"><img${add_attribute("src", recipe.thumbnail, 0)} alt="${"Thumbnail for " + escape(recipe.title)}" class="${"svelte-swpt9d"}">
					<div class="${"wrapper svelte-swpt9d"}"><div>${escape(recipe.title)}</div>
						${ ``}</div>
				</a>`)}</ul>`}
</main>`;
    });

    return App;

})));
//# sourceMappingURL=ssr.js.map
